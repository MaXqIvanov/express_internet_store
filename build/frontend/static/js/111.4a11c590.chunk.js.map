{"version":3,"file":"static/js/111.4a11c590.chunk.js","mappings":"sRACA,GAAgB,KAAO,wBAAwB,QAAU,2BAA2B,KAAO,wBAAwB,gBAAkB,mCAAmC,aAAe,gCAAgC,UAAY,6BAA6B,SAAW,4BAA4B,WAAa,+B,SCKvSA,EAAY,SAACC,GAAe,IAAD,IACpC,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAMMC,EAAAA,EAAAA,IAAQ,CACZC,KAAM,aANJC,EADJ,EACIA,SAEAC,EAHJ,EAEIC,UACAD,OAEAE,EALJ,EAKIA,aAIAC,EAAoB,mCAAC,WAAOC,GAAP,gFACnBC,EAAU,SAASC,OAAOF,EAAKG,cAArB,cAAwDD,OAAOF,EAAKI,gBAD3D,SAEHf,EAAMgB,aAAaC,QAAQC,eAFxB,OAEjBC,EAFiB,QAGvBC,EAAAA,EAAAA,IAAmBD,EAAOP,EAAST,EAAiBD,GAH7B,2CAAD,sDAO1B,OACE,gBAAKmB,UAAWC,EAAAA,KAAhB,UACI,iBAAKD,UAAWC,EAAAA,QAAhB,WACA,gLACA,UAACC,EAAA,EAAD,CAAMC,SAAUf,EAAaC,GAAuBW,UAAWC,EAAAA,KAA/D,WACE,SAACC,EAAA,WAAD,kBAAkBjB,EAAS,iBAAkB,CACvDmB,SAAU,8KACRC,UAAW,CACRC,MAAM,EACNf,QAAS,kJAEEgB,UAAU,CACND,MAAO,IACPf,QAAS,mJARnB,IAUNiB,GAAG,WAAWC,YAAY,wGACpB,iBAAKT,UAAWC,EAAAA,gBAAhB,WAAmC,SAACC,EAAA,WAAD,kBAAmBjB,EAAS,eAAe,CAC5EmB,SAAU,8KACVC,UAAW,CACPC,MAAM,EACNf,QAAS,kJAEbgB,UAAU,CACND,MAAO,GACPf,QAAS,mJARoB,IAUjCkB,YAAY,8BAAeT,UAAWC,EAAAA,aAAgBS,aAAa,UACrE,SAACC,EAAA,EAAD,CAAQC,SAAU/B,EAAcgC,KAAK,SAASb,UAAWC,EAAAA,UAAzD,wEAEA,gBAAKD,UAAWC,EAAAA,UAAhB,SAAoC,OAANf,QAAM,IAANA,GAAAA,EAAQQ,gBAAiB,cAAGoB,MAAO,CAACC,MAAM,OAAjB,gBACnD7B,QADmD,IACnDA,GADmD,UACnDA,EAAQQ,sBAD2C,aACnD,EAAwBH,UAElB,OAANL,QAAM,IAANA,GAAAA,EAAQO,cAAe,cAAGqB,MAAO,CAACC,MAAM,OAAjB,gBAA0B7B,QAA1B,IAA0BA,GAA1B,UAA0BA,EAAQO,oBAAlC,aAA0B,EAAsBF,WACxE,8BAGL,mBAAOS,UAAWC,EAAAA,WAAlB,gEACJ,cAAGe,KAAK,sCAAR,4BADI,QAEJ,cAAGA,KAAK,oCAAR,8BAFI,mBAYR","sources":["webpack://client/./src/scss/questions/questions.module.scss?8271","pages/question/Questions.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"questions_main__VDTgI\",\"wrapper\":\"questions_wrapper__fCGc3\",\"Form\":\"questions_Form__AQw1D\",\"nickName_Button\":\"questions_nickName_Button__m4bV9\",\"name_message\":\"questions_name_message__WbSqj\",\"erros_Div\":\"questions_erros_Div__KQ+Qc\",\"recapcha\":\"questions_recapcha__GW3Vw\",\"textCapcha\":\"questions_textCapcha__AgeQz\"};","import React, { useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport Form from 'react-bootstrap/esm/Form'\r\nimport { useForm } from 'react-hook-form'\r\nimport { APITelegramMessage } from '../../api/api'\r\nimport s from '../../scss/questions/questions.module.scss'\r\nexport const Questions = (props:any) => {\r\n    const [stateButtons, setStateButtons] = useState(false);\r\n    const { \r\n        register,\r\n        formState: {\r\n        errors\r\n        },\r\n        handleSubmit,\r\n      } = useForm({\r\n      mode: \"onChange\"\r\n  });\r\n  const onsubmitMessageError=async (data:any)=>{\r\n      let message = \"name: \"+String(data.name_message) + \", \" + \"massage: \"+String(data.errors_message)\r\n      const token = await props.recaptchaRef.current.executeAsync();\r\n      APITelegramMessage(token, message, setStateButtons, stateButtons)\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className={s.main}>\r\n        <div className={s.wrapper}>\r\n        <h5>Опишите возникшую проблему</h5>\r\n        <Form onSubmit={handleSubmit(onsubmitMessageError)} className={s.Form}>\r\n          <Form.Control {...register(\"errors_message\", {\r\nrequired: \"Поле обязательно для заполнения\",\r\n  minLength: {\r\n     value:3 ,\r\n     message: 'минимальная длина 3 символа',\r\n                },\r\n                maxLength:{\r\n                    value: 140,\r\n                    message: 'Слишком большое сообщение'\r\n                },\r\n})} as=\"textarea\" placeholder=\"Описание проблемы\" />\r\n          <div className={s.nickName_Button}><Form.Control  {...register(\"name_message\",{\r\n            required: \"Поле обязательно для заполнения\",\r\n            minLength: {\r\n                value:3 ,\r\n                message: 'минимальная длина 3 символа'\r\n                           },\r\n            maxLength:{\r\n                value: 40,\r\n                message: 'Слишком большое сообщение'\r\n            },\r\n        })} placeholder=\"Ваш NickName\" className={s.name_message} autoComplete=\"off\"/>\r\n          <Button disabled={stateButtons} type='submit' className={s.ButtonSub}>отправить</Button>\r\n          </div>\r\n          <div className={s.erros_Div}>{errors?.errors_message ? <p style={{color:'red'}}>{\r\n              errors?.errors_message?.message\r\n              }</p>\r\n            : errors?.name_message ? <p style={{color:'red'}}>{errors?.name_message?.message}</p>\r\n            :<></>\r\n            }</div>\r\n        </Form>\r\n        <small className={s.textCapcha}>This site is protected by reCAPTCHA and the Google \r\n    <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and\r\n    <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n</small>\r\n        </div>\r\n        \r\n      \r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Questions"],"names":["Questions","props","useState","stateButtons","setStateButtons","useForm","mode","register","errors","formState","handleSubmit","onsubmitMessageError","data","message","String","name_message","errors_message","recaptchaRef","current","executeAsync","token","APITelegramMessage","className","s","Form","onSubmit","required","minLength","value","maxLength","as","placeholder","autoComplete","Button","disabled","type","style","color","href"],"sourceRoot":""}